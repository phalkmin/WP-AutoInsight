<?php

use Orhanerday\OpenAi\OpenAi;
use GeminiAPI\Client;
use GeminiAPI\Resources\Parts\TextPart;

/**
 * The function `abcc_gemini_generate_text` uses the Gemini API to generate text based on a prompt and
 * returns the generated text as an array of lines.
 *
 * @param string api_key The `api_key` parameter is the API key that is required to authenticate and access
 * the Gemini API. This key is used to identify and authorize the user making the API request. Make
 * sure you have a valid and authorized API key to use in the `abcc_gemini_generate_text` function.
 * @param string prompt The `prompt` parameter in the `abcc_gemini_generate_text` function is the input text
 * that will be used to generate additional text using the Gemini API. It serves as the starting point
 * or context for the AI model to continue generating text based on the provided prompt.
 * @param string length The `` parameter in the `abcc_gemini_generate_text` function determines the
 * maximum length of the text that will be generated by the Gemini API. This parameter specifies the
 * number of characters or words that the generated text should contain. You can set this parameter to
 * control the length of the text
 *
 * @return array An array containing the text generated by the Gemini API in response to the provided prompt.
 * Each element of the array represents a line of text from the generated content.
 */
function abcc_gemini_generate_text( $api_key, $prompt, $length ) {

	$gemini = new Client( $api_key );

	$chat = $gemini->geminiPro()->startChat();

	$response = $chat->sendMessage( new TextPart( $prompt ) );

	if ( is_wp_error( $response ) ) {
		add_settings_error(
			'openai-settings',
			'api-request-error',
			esc_html__( 'Error in API request. Please check your Gemini configuration.', 'automated-blog-content-creator' ),
			'error'
		);
		return false;
	}

	$text = $response->text();

	// Break text into an array at each line break.
	$text_array = explode( PHP_EOL, $text );

	return $text_array;
}

/**
 * The function generates text using OpenAI's API with a given prompt and length.
 *
 * @param string $api_key The API key needed to access the OpenAI API.
 * @param string $prompt The text prompt that the OpenAI model will use to generate the text.
 * @param int    $length The length parameter is the maximum number of tokens (words or characters) that the
 *    generated text should have.
 *
 * @return array An array of text generated by the OpenAI API, based on the provided prompt and length. The
 * text is broken into an array at each line break.
 */
function abcc_openai_generate_text( $api_key, $prompt, $length ) {

	$openai = new OpenAi( $api_key );

	$response = $openai->chat(
		array(
			'model'       => 'gpt-4o',
			'messages'    => array(
				array(
					'role'    => 'user',
					'content' => wp_kses_post( $prompt ),
				),
			),
			'max_tokens'  => absint( $length ),
			'n'           => 1,
			'stop'        => null,
			'temperature' => 0.8,
		)
	);

	if ( is_wp_error( $response ) ) {
		add_settings_error(
			'openai-settings',
			'api-request-error',
			esc_html__( 'Error in API request. Please check your OpenAI configuration.', 'automated-blog-content-creator' ),
			'error'
		);
		return false;
	}

	// Decode response.
	$d = json_decode( $response );
	// Get Content.
	$text = $d->choices[0]->message->content;

	// Break text into an array at each line break.
	$text_array = explode( PHP_EOL, $text );

	return $text_array;
}

/**
 * The function generates images using OpenAI API based on a given prompt and returns an array of URLs.
 *
 * @param string $api_key The API key for the OpenAI service that is being used to generate images.
 * @param string $prompt The prompt is the text or description that you provide to the OpenAI API to generate
 * images based on that description. For example, if you provide the prompt "a red apple on a white
 * background", the API will generate images of a red apple on a white background.
 * @param string $n The 'n' parameter specifies the number of images to generate.
 *
 * @return array an array of URLs for generated images based on the provided prompt using the OpenAI API.
 */
function abcc_openai_generate_images( $api_key, $prompt, $n, $image_size = '1792x1024' ) {
	$openai = new OpenAi( $api_key );

	$response = $openai->image(
		array(
			'model'           => 'dall-e-3',
			'prompt'          => wp_kses_post( $prompt ),
			'n'               => absint( $n ),
			'size'            => $image_size,
			'response_format' => 'url',
		)
	);

	if ( is_wp_error( $response ) ) {
		error_log( print_r( $response, true ) );
		return false;
	}

	// Decode the JSON into an associative array.
	$response = json_decode( $response, true );

	// Check if 'data' key exists in the response array.
	if ( isset( $response['data'] ) && is_array( $response['data'] ) ) {
		$urls = array();

		// Iterate over each element in the 'data' array.
		foreach ( $response['data'] as $item ) {
			// Check if 'url' key exists in the item.
			if ( isset( $item['url'] ) ) {
				$urls[] = ( $item['url'] );
			}
		}
	}

	return $urls;
}
