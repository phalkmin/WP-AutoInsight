<?php

use Orhanerday\OpenAi\OpenAi;
use GeminiAPI\Client;
use GeminiAPI\Resources\Parts\TextPart;

/**
 * Generates text using Gemini API.
 *
 * @param string $api_key API key for Gemini API.
 * @param string $prompt Text prompt for generating content.
 * @param string $length Length of the generated content.
 * @return array|false An array containing lines of generated text, or false on failure.
 */
function abcc_gemini_generate_text( $api_key, $prompt, $length ) {
	$gemini = new Client( $api_key );
	$chat   = $gemini->geminiPro()->startChat();

	$response = $chat->sendMessage( new TextPart( $prompt ) );

	if ( is_wp_error( $response ) ) {
		handle_api_request_error( $response, 'Gemini' );
		return false;
	}

	$text_array = explode( PHP_EOL, $response->text() );
	return $text_array;
}

/**
 * Generates text using OpenAI's API.
 *
 * @param string $api_key API key for OpenAI.
 * @param string $prompt Text prompt.
 * @param int    $length Maximum number of tokens.
 * @return array|false An array containing lines of generated text, or false on failure.
 */
function abcc_openai_generate_text( $api_key, $prompt, $length, $prompt_select ) {
	$openai = new OpenAi( $api_key );

	// compability issue.
	if ( 'openai' === $prompt_select ) {
		$prompt_select = 'gpt-3.5-turbo-0125';
	}
	$response = $openai->chat(
		array(
			'model'       => $prompt_select,
			'messages'    => array(
				array(
					'role'    => 'user',
					'content' => wp_kses_post( $prompt ),
				),
			),
			'max_tokens'  => absint( $length ),
			'n'           => 1,
			'stop'        => null,
			'temperature' => 0.8,
		)
	);

	if ( is_wp_error( $response ) ) {
		handle_api_request_error( $response, 'OpenAI' );
		return false;
	}

	$decoded_response = json_decode( $response, true );

	if ( ! isset( $decoded_response['choices'][0]['message']['content'] ) ) {
		error_log( 'Unexpected OpenAI response structure' . print_r( $decoded_response ) );
		return false;
	} else {
		$text       = $decoded_response['choices'][0]['message']['content'];
		$text_array = explode( PHP_EOL, $text );

		return $text_array;
	}
}


/**
 * The function `abcc_openai_generate_images` uses the OpenAI API to generate a specified number of
 * images based on a given prompt and image size.
 *
 * @param string api_key The `api_key` parameter in the `abcc_openai_generate_images` function is used to
 * authenticate your requests to the OpenAI API. You need to provide a valid API key that you obtain
 * from OpenAI when calling this function. This key allows you to access the DALL-E model for
 * @param string prompt The `prompt` parameter in the `abcc_openai_generate_images` function is used to
 * provide a text prompt that describes the images you want to generate. This prompt helps the OpenAI
 * model understand the context and generate relevant images based on the input provided.
 * @param string n The parameter `n` in the `abcc_openai_generate_images` function represents the number of
 * images you want to generate based on the provided prompt. It specifies how many images the OpenAI
 * API should create in response to the given input.
 * @param string image_size The `image_size` parameter in the `abcc_openai_generate_images` function specifies
 * the size of the generated images. In this function, the default value for `image_size` is set to
 * '1792x1024', which represents the width and height dimensions of the images to be generated
 *
 * @return array The function `abcc_openai_generate_images` is returning an array of image URLs generated by
 * the OpenAI API based on the provided prompt and parameters.
 */
function abcc_openai_generate_images( $api_key, $prompt, $n, $image_size = '1792x1024' ) {
	$openai = new OpenAi( $api_key );

	$response = $openai->image(
		array(
			'model'           => 'dall-e-3',
			'prompt'          => wp_kses_post( $prompt ),
			'n'               => absint( $n ),
			'size'            => $image_size,
			'response_format' => 'url',
		)
	);

	if ( is_wp_error( $response ) ) {
		handle_api_request_error( $response, 'OpenAI' );
		return false;
	}

	$response_data = json_decode( $response, true );
	if ( empty( $response_data['data'] ) ) {
		error_log( 'OpenAI Image API: Missing expected data in response' );
		return false;
	}

	$urls = array_map(
		function ( $item ) {
			return $item['url'] ?? null;
		},
		$response_data['data']
	);

	return array_filter( $urls );
}
