<?php
/*
Plugin Name: Automated Blog Content Creator
Description: Create blog posts automatically using the OpenAI API - It's ChatGPT directly on your site!
Version: 0.8
Author: Paulo H. Alkmin
Author URI: https://phalkmin.me/
Text Domain: automated-wordpress-content-creator
Domain Path: /languages
*/

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

require_once __DIR__ . '/vendor/autoload.php';

use Orhanerday\OpenAi\OpenAi;

/**
 * The function generates text using OpenAI's API with a given prompt and length.
 *
 * @param string $api_key The API key needed to access the OpenAI API.
 * @param string $prompt The text prompt that the OpenAI model will use to generate the text.
 * @param int    $length The length parameter is the maximum number of tokens (words or characters) that the
 *    generated text should have.
 *
 * @return array An array of text generated by the OpenAI API, based on the provided prompt and length. The
 * text is broken into an array at each line break.
 */
function abcc_openai_generate_text( $api_key, $prompt, $length ) {
	$openai = new OpenAi( $api_key );

	$response = $openai->completion(
		array(
			'model'       => 'text-davinci-003',
			'prompt'      => wp_kses_post( $prompt ),
			'max_tokens'  => absint( $length ),
			'n'           => 1,
			'stop'        => null,
			'temperature' => 0.8,
		)
	);

	// Decode response.
	$d = json_decode( $response );
	// Get Content.
	$text = $d->choices[0]->text;

	// Break text into an array at each line break.
	$text_array = explode( PHP_EOL, $text );

	return $text_array;
}

/**
 * The function generates images using OpenAI API based on a given prompt and returns an array of URLs.
 *
 * @param string $api_key The API key for the OpenAI service that is being used to generate images.
 * @param string $prompt The prompt is the text or description that you provide to the OpenAI API to generate
 * images based on that description. For example, if you provide the prompt "a red apple on a white
 * background", the API will generate images of a red apple on a white background.
 * @param string $n The 'n' parameter specifies the number of images to generate.
 *
 * @return array an array of URLs for generated images based on the provided prompt using the OpenAI API.
 */
function abcc_openai_generate_images( $api_key, $prompt, $n ) {
	$openai = new OpenAi( $api_key );

	$response = $openai->image(
		array(
			'prompt'          => wp_kses_post( $prompt ),
			'n'               => absint( $n ),
			'size'            => '512x512',
			'response_format' => 'url',
		)
	);

	// Decode the JSON into an associative array.
	$response = json_decode( $response, true );

	// Check if 'data' key exists in the response array.
	if ( isset( $response['data'] ) && is_array( $response['data'] ) ) {
		$urls = array();

		// Iterate over each element in the 'data' array.
		foreach ( $response['data'] as $item ) {
			// Check if 'url' key exists in the item.
			if ( isset( $item['url'] ) ) {
				// Add the URL to the URLs array.
				$urls[] = esc_url( $item['url'] );
			}
		}

		return $urls;
	}
}

/**
 * The below functions are used to create and output Gutenberg blocks in WordPress.
 *
 * @param string $block_name The name of the Gutenberg block being created.
 * @param array  $attributes The attributes parameter is an array that contains the attributes of a Gutenberg
 *  block. These attributes can include things like alignment, font size, background color, etc. The
 *  attributes are passed to the abcc_create_block function as the second parameter and are then encoded
 *  as a JSON string using the wp_json_encode function.
 * @param string $content The content parameter is the actual content that will be displayed within the block.
 * It can be any valid HTML or text content.
 *
 * @return array The code contains three functions. The first function `abcc_create_block` takes in a block
 * name, attributes, and content and returns a string of HTML code for that block. The second function
 * `abcc_create_blocks` takes in an array of text items, creates a paragraph block for each item, and
 * returns an array of blocks. The third function `abcc_gutenberg_blocks` takes in
 */
function abcc_create_block( $block_name, $attributes = array(), $content = '' ) {
	$attributes_string = wp_json_encode( $attributes );
	$block_content     = '<!-- wp:' . esc_attr( $block_name ) . ' ' . $attributes_string . ' -->' . wp_kses_post( $content ) . '<!-- /wp:' . esc_attr( $block_name ) . ' -->';
	return $block_content;
}

function abcc_create_blocks( $text_array ) {
	$blocks = array();
	foreach ( $text_array as $item ) {
		if ( ! empty( $item ) ) {
			$block    = array(
				'name'       => 'paragraph',
				'attributes' => array( 'align' => 'left' ),
				'content'    => wp_kses_post( $item ),
			);
			$blocks[] = $block;
		}
	}
	return $blocks;
}

function abcc_gutenberg_blocks( $blocks = array() ) {
	$block_contents = '';
	foreach ( $blocks as $block ) {
		$block_contents .= abcc_create_block( $block['name'], $block['attributes'], $block['content'] );
	}
	return $block_contents;
}

/**
 * The function generates a draft post with a title and content based on given keywords using OpenAI's
 * text and image generation API.
 *
 * @param string  $api_key The API key needed to access the OpenAI API for generating text and images.
 * @param string  $keywords An array of keywords that will be used as the basis for generating the article
 *  content.
 * @param boolean $auto_create The auto_create parameter is a boolean value that determines whether or not to
 * automatically create a featured image for the post using the images generated by the OpenAI API. If
 * set to true, the function will attempt to upload the first generated image as the post's featured
 * image.
 * @param string  $char_limit The maximum number of characters that the generated text should have.
 */
function abcc_openai_generate_post( $api_key, $keywords, $auto_create = false, $char_limit = 200 ) {
	$prompt = __( 'Write a SEO focused article about ', 'automated-blog-content-creator' ) . implode( ', ', array_map( 'sanitize_text_field', $keywords ) );
	$text   = abcc_openai_generate_text( $api_key, $prompt, $char_limit );
	$images = abcc_openai_generate_images( $api_key, $prompt, 1 );

	$format_content = abcc_create_blocks( $text );
	$post_content   = abcc_gutenberg_blocks( $format_content );

	$post_data = array(
		'post_title'   => __( 'Article about ', 'automated-blog-content-creator' ) . implode( ', ', array_map( 'sanitize_text_field', $keywords ) ),
		'post_content' => wp_kses_post( $post_content ),
		'post_status'  => 'draft',
		'post_author'  => 1,
		'post_type'    => 'post',
	);

	$post_id = wp_insert_post( $post_data );

	if ( $auto_create ) {
		foreach ( $images as $image_url ) {
			$attachment_id = media_sideload_image( wp_kses_post( $image_url ), $post_id );
			if ( ! is_wp_error( $attachment_id ) ) {
				$thumbnail_id = $attachment_id;
				break;
			}
		}

		if ( ! empty( $thumbnail_id ) ) {
			set_post_thumbnail( $post_id, $thumbnail_id );
		}
	}
}

/**
 * This function adds an options page for the OpenAI Blog Post Generator to the WordPress admin menu.
 */
function abcc_openai_blog_post_menu() {
	add_options_page(
		__( 'OpenAI Blog Post Generator', 'automated-blog-content-creator' ),
		__( 'OpenAI Blog Post', 'automated-blog-content-creator' ),
		'manage_options',
		'automated-blog-content-creator-post',
		'abcc_openai_blog_post_options_page'
	);
}
add_action( 'admin_menu', 'abcc_openai_blog_post_menu' );

/**
 * This function creates an options page for a WordPress plugin that allows users to set OpenAI API
 * key, keywords, auto-post creation, and character limit, and also includes a button to manually
 * generate a blog post using OpenAI.
 */
function abcc_openai_blog_post_options_page() {
	if ( ! current_user_can( 'manage_options' ) ) {
		wp_die( esc_html( __( 'You do not have permission to access this page.', 'automated-blog-content-creator' ) ) );
	}

	if ( isset( $_POST['submit'], $_POST['openai_generate_post'] ) && wp_verify_nonce( sanitize_key( $_POST['openai_generate_post'] ), 'openai_nonce' ) ) {
		$api_key     = isset( $_POST['openai_api_key'] ) ? sanitize_text_field( wp_unslash( $_POST['openai_api_key'] ) ) : '';
		$keywords    = isset( $_POST['openai_keywords'] ) ? sanitize_text_field( wp_unslash( $_POST['openai_keywords'] ) ) : '';
		$auto_create = isset( $_POST['openai_auto_create'] );
		$char_limit  = isset( $_POST['openai_char_limit'] ) ? absint( $_POST['openai_char_limit'] ) : 0;

		update_option( 'openai_api_key', wp_unslash( $api_key ) );
		update_option( 'openai_keywords', wp_unslash( $keywords ) );
		update_option( 'openai_auto_create', $auto_create );
		update_option( 'openai_char_limit', $char_limit );
	}

	$api_key     = get_option( 'openai_api_key', '' );
	$keywords    = get_option( 'openai_keywords', '' );
	$auto_create = get_option( 'openai_auto_create', false );
	$char_limit  = get_option( 'openai_char_limit', 200 );
	wp_nonce_field( 'openai_generate_post', 'openai_nonce' );
	?>
	<div class="wrap">
		<h1>
			<?php echo esc_html__( 'OpenAI Blog Post Generator', 'automated-blog-content-creator' ); ?>
		</h1>
		<form method="post" action="">
			<table class="form-table">
				<tr>
					<th scope="row"><label for="openai_api_key">
							<?php echo esc_html__( 'OpenAI API key:', 'automated-blog-content-creator' ); ?>
						</label></th>
					<td>
						<input type="text" id="openai_api_key" name="openai_api_key"
							value="<?php echo esc_attr( $api_key ); ?>" class="regular-text">
					</td>
				</tr>
				<tr>
					<th scope="row"><label for="openai_keywords">
							<?php echo esc_html__( 'Subjects / Keywords that blog posts should be about:', 'automated-blog-content-creator' ); ?>
						</label></th>
					<td>
						<textarea id="openai_keywords" name="openai_keywords"
							rows="4"><?php echo esc_textarea( $keywords ); ?></textarea>
					</td>
				</tr>
				<tr>
					<th scope="row"><label for="openai_auto_create">
							<?php echo esc_html__( 'Automatic post creation? (Daily)', 'automated-blog-content-creator' ); ?>
						</label></th>
					<td>
						<input type="checkbox" id="openai_auto_create" name="openai_auto_create" <?php checked( $auto_create ); ?>>
					</td>
				</tr>
				<tr>
					<th scope="row"><label for="openai_char_limit">
							<?php echo esc_html__( 'Max Token Limit', 'automated-blog-content-creator' ); ?>
						</label></th>
					<td>
						<input type="number" id="openai_char_limit" name="openai_char_limit"
							value="<?php echo esc_attr( $char_limit ); ?>" min="1">
					</td>
				</tr>
			</table>
			<p class="submit">
				<input type="submit" name="submit" id="submit" class="button button-primary"
					value="<?php echo esc_attr__( 'Save', 'automated-blog-content-creator' ); ?>">
				<input type="button" name="generate-post" id="generate-post" class="button button-primary"
					value="<?php echo esc_attr__( 'Create post manually', 'automated-blog-content-creator' ); ?>">
				<script>
					(function ($) {
						$('#generate-post').on('click', function () {
							var $btn = $(this);
							$btn.prop('disabled', true);

							$.ajax({
								url: ajaxurl,
								method: 'POST',
								data: {
									action: 'openai_generate_post',
									_ajax_nonce: $('#openai_nonce').val()
								},
								success: function (response) {
									alert(response.data);
								},
								error: function (xhr) {
									alert('<?php echo esc_js( 'Error generating post:', 'automated-blog-content-creator' ); ?> ' + xhr.responseText);
								},
								complete: function () {
									$btn.prop('disabled', false);
								}
							});
						});
					})(jQuery);
				</script>
			</p>
		</form>
	</div>
	<?php
}

/**
 * This function generates a post daily using OpenAI API based on specified keywords and character
 * limit.
 *
 * @return nothing if any of the following conditions are met:
 * - The OpenAI API key is empty
 * - The OpenAI keywords are empty
 * - The OpenAI auto-create option is false
 */
function abcc_openai_generate_post_daily() {
	$api_key     = get_option( 'openai_api_key', '' );
	$keywords    = explode( "\n", get_option( 'openai_keywords', '' ) );
	$auto_create = get_option( 'openai_auto_create', false );
	$char_limit  = get_option( 'openai_char_limit', 200 );

	if ( empty( $api_key ) || empty( $keywords ) || ! $auto_create ) {
		return;
	}

	openai_generate_post( $api_key, $keywords, $auto_create, $char_limit );
}
add_action( 'openai_generate_post_hook', 'openai_generate_post_daily' );


/**
 * The above code is scheduling a recurring event in WordPress using the `wp_schedule_event()`
 * function. It checks if the event named `'openai_generate_post_hook'` is not already scheduled using
 * the `wp_next_scheduled()` function. If it is not scheduled, it schedules the event to run daily
 * using the `daily` interval. */
if ( ! wp_next_scheduled( 'openai_generate_post_hook' ) ) {
	wp_schedule_event( time(), 'daily', 'abcc_openai_generate_post_hook' );
}

/**
 * This is a PHP function that generates a post using OpenAI API and AJAX, with options for API key,
 * keywords, and character limit.
 */
function abcc_openai_generate_post_ajax() {
	check_ajax_referer( 'openai_generate_post' );
	$api_key    = get_option( 'openai_api_key', '' );
	$keywords   = explode( "\n", get_option( 'openai_keywords', '' ) );
	$char_limit = get_option( 'openai_char_limit', 200 );

	if ( empty( $api_key ) || empty( $keywords ) ) {
		wp_send_json_error( esc_html__( 'API Key or keywords not set.', 'automated-blog-content-creator' ) );
	}

	abcc_openai_generate_post( $api_key, $keywords, false, $char_limit );

	wp_send_json_success( esc_html__( 'Post created successfully!', 'automated-blog-content-creator' ) );
}
add_action( 'wp_ajax_openai_generate_post', 'abcc_openai_generate_post_ajax' );

/**
 * This function deactivates a scheduled hook for generating posts using OpenAI in WordPress.
 */
function abcc_openai_deactivate_plugin() {
	wp_clear_scheduled_hook( 'openai_generate_post_hook' );
}
register_deactivation_hook( __FILE__, 'abcc_openai_deactivate_plugin' );
